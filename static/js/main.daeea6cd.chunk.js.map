{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","error","filteredRobots","filter","robot","toLowerCase","includes","message","React","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.daeea6cd.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='card'>\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div className='container'>\n     {\n      robots.map(user => {\n        return (\n          <Card \n            key={user.id} \n            id={user.id} \n            name={user.name} \n            email={user.email}\n          />\n        );\n      })\n     }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div>\n      <input \n        className='search-field' \n        type='search' \n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = props => {\n  return (\n    <div style={{ overflow: 'scroll', border: '1px solid black', height: '72vh' }}>\n      {props.children}\n    </div>\n  )\n}\n\n\n\n\nexport default Scroll;","import React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport { setSearchField, requestRobots } from '../actions';\n\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\n\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending, error } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    if(error) {\n      return <h1>Error: {error.message}</h1>\n    }\n    else if (isPending) {\n      return <h1>Loading...</h1>\n    } else {\n      return (\n        <main>\n          <h1>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </main>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS, \n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS, \n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload});\n    default: \n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: null\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true});\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { searchRobots, requestRobots } from './reducers';\nimport thunkMiddleware from 'redux-thunk';\n\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({\n  searchRobots,\n  requestRobots\n});\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}