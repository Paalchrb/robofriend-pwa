{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","error","filteredRobots","filter","robot","toLowerCase","includes","message","React","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducers","combineReducers","action","Object","assign","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e7940f1f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='card'>\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div className='container'>\n     {\n      robots.map(user => {\n        return (\n          <Card \n            key={user.id} \n            id={user.id} \n            name={user.name} \n            email={user.email}\n          />\n        );\n      })\n     }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div>\n      <input \n        className='search-field' \n        type='search' \n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = props => {\n  return (\n    <div style={{ overflow: 'scroll', border: '1px solid black', height: '72vh' }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport { setSearchField, requestRobots } from '../actions';\n\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending, error } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    if(error) {\n      return <h1>Error: {error.message}</h1>\n    }\n    else if (isPending) {\n      return <h1>Loading...</h1>\n    } else {\n      return (\n        <main>\n          <h1>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </main>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS, \n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS, \n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload});\n    default: \n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: null\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true});\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    default:\n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport App from './containers/App';\nimport './index.css';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst rootReducers = combineReducers({\n  searchRobots,\n  requestRobots\n});\n\nconst middleware = [thunk]\n\nconst store = createStore(rootReducers, composeWithDevTools(applyMiddleware(...middleware)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}